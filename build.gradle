plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'net.minecraftforge.gradle.forge' version '6f53277'
    id 'org.spongepowered.mixin' version '0.6-SNAPSHOT'
}

String modId = 'modid'
String modVer = '1.0.0'
Boolean useMixins = false

group "com.github.vaaay.${modId}"
version "${modVer}"

configurations {
    include
    implementation.extendsFrom(include)
}

repositories {
    mavenCentral()
    maven {
        url = "https://repo.spongepowered.org/maven/"
    }
}

dependencies {


    if (!useMixins) return
    include("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }
    annotationProcessor "org.spongepowered:mixin:0.7.11-SNAPSHOT"
}



minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}



sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

jar {
    archiveBaseName.set("${modId.charAt(0).toString().toUpperCase()}${modId.substring(1)}")

    if (!useMixins) {enabled = false; return}
    manifest.attributes(
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "MixinConfigs": "mixins.${modId}.json",
            "FMLCorePluginContainsFMLMod": true,
            "ForceLoadAsMod": true
    )

    enabled = false
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}

mixin {
    if (!useMixins) return
    add sourceSets.main, "mixins.${modId}.refmap.json"
}

tasks.named("reobfJar").configure { dependsOn(tasks.named("shadowJar")) }

